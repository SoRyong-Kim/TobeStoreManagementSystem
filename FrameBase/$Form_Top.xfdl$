<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Form_Top" width="1280" height="50" onload="Form_Top_onload" ontimer="Form_Top_ontimer">
    <Layouts>
      <Layout width="1280" height="50" screenid="Desktop_screen">
        <Static id="staBg" taborder="0" left="0" top="0" right="0" cssclass="sta_TF_Bg" height="50" onclick="staBg_onclick" text=""/>
        <Static id="Static01" taborder="1" left="-60" top="0" width="180" height="50" cssclass="sta_TF_Logo3"/>
        <MaskEdit id="mskStartTime" taborder="5" top="0" format="##'시간 '##'분 '##'초'" type="string" border="0px none" readonly="true" cssclass="msk_WF_RO" bottom="0" value="000000" right="0" width="128"/>
        <Static id="sta01" taborder="4" text="총 근무 시간 : " top="0" bottom="0" right="140" width="79"/>
        <Static id="staName" taborder="2" text="이름" top="0" right="240" width="50" bottom="0" cssclass="sta_TF_Name"/>
        <Static id="Static01_00" taborder="3" left="60" top="0" width="180" height="50" cssclass="sta_TF_Logo4"/>
        <Button id="btnLogOut" taborder="6" top="10" width="80" height="30" right="370" onclick="btnLogOut_onclick" uWord="frame.logOut" text="로그아웃"/>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
*  Necacro EduPack
*  @MenuPath		Script 표준
*  @FileName		C:\TobeStoreManagement\FrameBase\Form_Top.xfdl
*  @Creator			김소룡
*  @CreateDate		2024/08/06
*  @Desction		스크립트 표준 및 주석 표준 정의

************** 소스 수정 이력 ***********************************************
*  date          		Modifier                Description
*******************************************************************************
*  2024/08/06     	    Education 	             최초 생성
*******************************************************************************
*/

/************************************************************************************************
 * FORM 변수 선언 영역
 ************************************************************************************************/
this.fvObjApp 		= this.gfnGetApplication();
this.fvTopBtnPrefix = "TOP_";
 this.fvObjApp = nexacro.getApplication();
/************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose)
 ************************************************************************************************/
this.Form_Top_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
//	this.divTopBtn.form.set_scrollbartype("none");
	
// 	// xPush
// 	
// 	//XPush Message 송/수신을 위한 Layout세팅         
// 	
// 	if ((nexacro._OS == "Android" || nexacro._OS == "iOS") && (nexacro._Browser == "Runtime"))  
// 	{      
// 		this.XPush00.set_layouturl("%USERAPP%XPushUrl/XPush_Message_Layout.xml");
// 	} else   
// 	{    
// 		this.XPush00.set_layouturl("XPushUrl::XPush_Message_Layout.xml");
// 	}
// 	
// 	this.fn_XPushStart();


};

// 1초마다 근무시간 초기화
this.Form_Top_ontimer = function(obj:nexacro.Form,e:nexacro.TimerEventInfo)
{
	this.fnSetWorkTime();
};

/************************************************************************************************
 * CALLBACK 콜백 처리부분(Transaction, Popup)
 ************************************************************************************************/
/**
 * @param {String} svcID - 서비스 ID
 * @param {Number} errorCode - 에러코드(정상 0, 에러 음수값)
 * @param {String} [errorMsg] - 에러메시지
 * @return N/A
*/
this.fn_callback = function(svcId, errCd, errMsg) {
	if(svcId == "deleteRole")
	{
		if(errCd == 0)
		{
			this.gfnAlert("msg.succ.delete");
		} else if (errCd == -1)
		{
			var sErrName = this.dsRole.getColumn(fvRow, "role_name");
			this.gfnAlert("msg.err.delete", sErrName); // 해당 역할을 삭제하려면 ~~~
		}
	}
}

/**
 * @description 메세지 콜백
*/
this.fnMsgCallback = function (strId, strVal)
{
	if(strId == "confirm.logout"){
		if(strVal){
			this.fnUpdateWorkTime();
			if(system.navigatorname != "nexacro"){		
				window.top.location.reload(true);
			}
		    this.fvObjApp.gvLogOut = "Y";
			//this.fvObjApp.exit();	// NRE에서는 종료됨
			//this.fnUpdateWorkTime();
			this.fvObjApp.avVFrameSet.set_separatesize("*,0,0");
			if (this.fvObjApp.gvRmbId == "Y")
			{
				var objs = this.fvObjApp.avLoginFrame.form.divLogin.form.edtId;
				var objs2 = this.fvObjApp.avLoginFrame.form.divLogin.form.edtPw;
				objs.set_value(this.fvObjApp.gdsUser.getColumn( 0 , "USER_ID"));
				objs2.set_value(this.fvObjApp.gdsUser.getColumn( 0 , "USER_PASSWORD"));
			}
		} 
		else{
			this.fvObjApp.gvLogOut = "N";
		}		
	}
};
/************************************************************************************************
 * CRUD 및 TRANSACTION 서비스 호출 처리
 ************************************************************************************************/
this.fnUpdateWorkTime = function ()
{
	this.dsWorkTime.addRow();
	// 아이디 입력
	var sId = this.fvObjApp.gdsUser.getColumn(0,"USER_ID");
	this.dsWorkTime.setColumn(0, "USER_ID", sId);
	
	// 시간 넣어주기
	var sETime = this.gfnGetFullTime();
	this.dsWorkTime.setColumn(0, "endTime", sETime);
	
	var sSTime = this.fvObjApp.gdsUser.getColumn(0, "startTime");
	this.dsWorkTime.setColumn(0, "startTime", sSTime);
	// 시간차이 구하기
	var sWorkTime = this.gfnGetWorkTime(sSTime, sETime);
	this.dsWorkTime.setColumn(0, "workTime", sWorkTime);
	trace(this.dsWorkTime.saveXML());
	trace("트랜잭션");
 	var sSvcID    = "updateWorkTime";
 	var sURL      = "SvcUrl::edu/updateWorkTime.do";
 	var sInDs     = "dsWorkTime=dsWorkTime";
 	var sOutDs    = "";
 	var sParam    = ""
 	var sCallBack = "fn_callback";
 	this.gfnTransaction(sSvcID, sURL, sInDs, sOutDs, sParam, sCallBack);
};

/************************************************************************************************
 * 사용자 FUNCTION 영역
 ************************************************************************************************/
/**
 * menu tab 버튼 첫번째 index 가져오는 함수
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnGetFirstTabIndex = function ()
{
	for(var i=0; i<this.dsMenu.rowcount;i++)
	{
		var objID   = this.dsMenu.getColumn(i, this.FRAME_MENUCOLUMNS.menuId);
		var objBtn  = this.fnFindObj(this.fvTopBtnPrefix + objID);
		if(0 <= objBtn.left) {
			return i;
		}
	}
	return -1;
};

/**
 * 버튼 첫번째 이동 함수
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnMoveFirst = function (nMoveIdx)
{
	var nIndex;
	var objID;
	var objBtn;
	var tabFirstObj;

	nIndex = this.fnGetFirstTabIndex();
	if (nIndex < 0){
		return;
	}

	if (nMoveIdx < 0) {
		return;
	}
	if (nMoveIdx >= this.dsMenu.rowcount) {
		return;
	}

	objID = this.dsMenu.getColumn(nIndex, this.FRAME_MENUCOLUMNS.menuId);
	var tabFirstObj = this.fnFindObj(this.fvTopBtnPrefix + objID);

	objID = this.dsMenu.getColumn(nMoveIdx, this.FRAME_MENUCOLUMNS.menuId);
	objBtn = this.fnFindObj(this.fvTopBtnPrefix + objID);

	var nShiftPos = objBtn.getOffsetLeft() - tabFirstObj.getOffsetLeft();

	for (var i = 0; i < this.dsMenu.rowcount; i++) 
	{
		objID = this.dsMenu.getColumn(i, this.FRAME_MENUCOLUMNS.menuId);
		objBtn = this.fnFindObj(this.fvTopBtnPrefix + objID);
		objBtn.move(objBtn.getOffsetLeft() - nShiftPos, objBtn.getOffsetTop());
	}
};

/**
 * 버튼 redraw 
 * @public
 * @param 
 * @return 
 * @example
 * @memberOf 
 */
this.fnRedrawBtn = function ()
{
	this.fnCheckShowBtnAll();
	this.fnSetSpinBtnShow();
};

/**
 * 모든 버튼 체크 
 * @public
 * @param 
 * @return 
 * @example
 * @memberOf 
 */
this.fnCheckShowBtnAll = function ()
{
	if (this.dsMenu.rowcount == 0) return;

	var tabFirstObj = this.fnFindObj(this.fvTopBtnPrefix + this.dsMenu.getColumn(0, this.FRAME_MENUCOLUMNS.menuId));
	var tabLastObj = this.fnFindObj(this.fvTopBtnPrefix + this.dsMenu.getColumn(this.dsMenu.rowcount - 1, this.FRAME_MENUCOLUMNS.menuId));
	var nLeft = tabFirstObj.getOffsetLeft();
	var nRight = tabLastObj.getOffsetRight();

	if (this.divTopBtn.getOffsetWidth() >= (nRight - nLeft)) 
	{
		this.fnMoveFirst(0);
		return;
	}
};

/**
 * spin 버튼 visible 처리
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnSetSpinBtnShow = function ()
{
	var objBtn;
	
	if(this.dsMenu.rowcount == 0) 
	{		
		this.btnPre.set_enable(false);
		this.btnNex.set_enable(false);
		return;
	}

	objBtn = this.fnFindObj(this.fvTopBtnPrefix + this.dsMenu.getColumn(this.dsMenu.rowcount - 1, this.FRAME_MENUCOLUMNS.menuId));

	if(this.divTopBtn.getOffsetWidth() < objBtn.getOffsetRight()) 
	{
		this.btnNex.set_enable(true);
	}
	else 
	{
		this.btnNex.set_enable(false);
	}

	objBtn = this.fnFindObj(this.fvTopBtnPrefix + this.dsMenu.getColumn(0, this.FRAME_MENUCOLUMNS.menuId));

	if(objBtn.getOffsetLeft() < 0) 
	{
		this.btnPre.set_enable(true);
	}
	else 
	{
		this.btnPre.set_enable(false);
	}
};

/**
 * topmenu를 dsMenu로 copy
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnLoad = function ()
{
	this.fvObjApp.gdsMenu.filter(this.FRAME_MENUCOLUMNS.menuLevel + "==0");
	this.dsMenu.copyData(this.fvObjApp.gdsMenu, true);
	this.fvObjApp.gdsMenu.filter("");
	this.fnSetTopMenu();
};

/**
 * topmenu세팅
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fvFirstMenu;

this.fnSetTopMenu = function ()
{
	var btnObj;
	for(var i=0; i<this.dsMenu.getRowCount(); i++) 
	{
		var strID = this.dsMenu.getColumn(i, this.FRAME_MENUCOLUMNS.menuId);
		
		// 첫번째 메뉴
		if (i == 0) this.fvFirstMenu = this.fvTopBtnPrefix + strID;
		
		// 다국어 처리
		var sMenuNameColumn = this.FRAME_MENUCOLUMNS.menuNm;
		var sNowLang        = nexacro.getEnvironmentVariable("evLanguage");
		if (sNowLang != "KO") {
			sMenuNameColumn = sMenuNameColumn + sNowLang;
		}
		var strName = this.dsMenu.getColumn(i, sMenuNameColumn);
		this.fnCreateTopMenu(strID, strName, i);
	}
	
	//첫번째 메뉴 선택
	var objFirstMenu = this.divTopBtn.form[this.fvFirstMenu];
	objFirstMenu.click();
	objFirstMenu.setSelectStatus(true);
	
	this.fnRedrawBtn();
};



// Top menu creation
this.fvMenuLeft = 50;
this.fnCreateTopMenu = function (strID, strName, index)
{
	// Creating Top Menu button
	var objBtn = new Button();
	
	var objSize = nexacro.getTextSize(strName, "bold 15px 'Verdana', 'Malgun Gothic'");
	objBtn.init(this.fvTopBtnPrefix + strID, this.fvMenuLeft, 0, objSize.nx, objSize.ny);
	this.fvMenuLeft = this.fvMenuLeft+ objSize.nx + 80;
	
	this.divTopBtn.addChild(objBtn.name, objBtn);
	objBtn.set_text(strName);
	objBtn.menuid = strID;
	objBtn.set_cssclass("btn_TF_Menu");
	objBtn.set_textAlign("center");
	objBtn.setEventHandler("onclick", this.Button_onclick, this);
	objBtn.set_visible(true);
	objBtn.show();
};

this.fnSetActiveBtn = function (menuId)
{
	var MenuObj;

	for (var i=0; i<this.dsMenu.getRowCount(); i++) 
	{
		MenuObj = this.fnFindObj(this.fvTopBtnPrefix + this.dsMenu.getColumn(i, this.FRAME_MENUCOLUMNS.menuId));
		
		if (menuId == this.dsMenu.getColumn(i, this.FRAME_MENUCOLUMNS.menuId)){
			MenuObj.setSelectStatus(true);
			//MenuObj.set_cssclass("btn_TF_Mnu");
		}
		else {
			MenuObj.setSelectStatus(false);
			//MenuObj.set_cssclass("btn_TF_Mnu");
		}
	}
};

// button을 반환
this.fnFindObj = function (strId)
{
	return this.divTopBtn.form.components[strId];
};


this.fnLoad = function ()
{
// 	this.fvObjApp.gdsMenu.filter(this.FRAME_MENUCOLUMNS.menuLevel + "==0");
// 	this.dsMenu.copyData(this.fvObjApp.gdsMenu, true);
// 	this.fvObjApp.gdsMenu.filter("");
// 	this.fnSetTopMenu();
};

/**
 * 로그인 사용자 세팅 
 * @return 
 * @example
 *
 * @memberOf 
 */
this.fnSetName = function()
{
	var sNameCol = "USER_NAME";
	// 다국어 처리
	var sNowLang = nexacro.getEnvironmentVariable("evLanguage");
	if (sNowLang != "KO") {
		sNameCol = sNameCol+sNowLang;
	}
//	trace(sNameCol);
	var sName  = this.fvObjApp.gdsUser.getColumn(0, sNameCol);	
	this.staName.set_text(sName + "님");	//다국어 처리 안함
	
	// 근무 시간 timer 설정
	this.setTimer( 0, 1000 );
};

this.fnSetWorkTime = function() 
{
	// 시간 설정
	// String 타입
//	trace("sSTime = " + sSTime);
	var sCTime = this.gfnGetFullTime();
//	trace("sCTime = " + sCTime);
	var sWorkTime = this.gfnGetWorkTime(this.fvObjApp.gdsUser.getColumn(0, "startTime"), sCTime);
	
	this.mskStartTime.set_value(sWorkTime);
}

/************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
 ************************************************************************************************/
this.btnLogOut_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var sMsgId = "confirm.logout";			//메세지ID
	var arrArg = "";						//메세지취환될값 배열[생략가능]
	var sPopId = sMsgId;					//메세지팝업ID[생략가능]	*해당화면에서 메시지 중복사용시 구분되는값을 넣어줘야함
	var sMsgCallback = "fnMsgCallback";		//메세지콜백[생략가능] 		* confirm성 메시지를 사용 시 반드시 필요
	
	// 로그아웃 하시겠습니까?
	this.gfnAlert(sMsgId, arrArg, sPopId, sMsgCallback);
	
	
};

this.Button_onclick = function (obj:Button, e:ClickEventInfo)
{
	this.fvObjApp.avLeftFrame.form.fnChangeMenu(obj.menuid);
	this.fvObjApp.avLeftMinFrame.form.pdivMenu.form.fnChangeMenu(obj.menuid);
	this.fnSetActiveBtn(obj.menuid);
};  

this.btnPre_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnMoveFirst(this.fnGetFirstTabIndex() - 1);
	this.fnRedrawBtn();
};

this.btnNex_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnMoveFirst(this.fnGetFirstTabIndex() + 1);
	this.fnRedrawBtn();
};

/**
 * @description 알림오픈버튼 클릭
*/
this.btnNotice_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var objTagetForm = this.fvObjApp.avMainFrame.form;
	//업무화면 활성화시 target 변경
	if(this.fvObjApp.avVFrameSet1.separatesize == "40,0,*"){
		objTagetForm = this.fvObjApp.avWorkFrame.getActiveFrame().form;	
	}
	
	var bAni = true;
	//this.btnNotice.u_showYn 으로 표시 여부 제어
	if (this.btnNotice.u_showYn == "Y"){
		this.fnSetNoticeShow(objTagetForm, false, bAni)
	}
	else{
		this.fnSetNoticeShow(objTagetForm, true, bAni);
	}	
};

/**
 * @description  알림여부에 맞게 알림창 초기화
 * @param  {object} objTargetForm 타겟form
 * @return none
 */
this.fnInitNoticeShow = function(objTargetForm)
{
	var objForm = objTargetForm;
	var bShow   = this.fnGetNoticeShow();
	var bAni    = false;
	this.fnSetNoticeShow(objForm, bShow, bAni);
}

/**
 * @description  현재알림상태 정보 리턴
 * @param  none
 * @return {boolean} 여부
 */
this.fnGetNoticeShow = function()
{
	if (this.btnNotice.u_showYn == "Y"){
		return true;
	}
	return false;
}


/**
 * @description  현재알림상태 정보 셋팅
 * @param  {object} objForm 적용form
 * @param  {boolean} bShow 표시여부
 * @param  {boolean} bAni 애니메이션 적용여부
 * @return none
 */
this.fnSetNoticeShow = function(objForm, bShow, bAni)
{
	//표시여부 셋팅 및 디자인적용
	if (bShow){
		this.btnNotice.u_showYn = "Y";									//알림적용여부(u_showYn : 유저프로퍼티로 사용)
		//objForm.divNotice.form.staNotice.set_text("공지사항입니다.");	//알림내용
	}
	else{
		this.btnNotice.u_showYn = "N";
	}
	
	//animation 이용여부에 따른 표시 동작호출
	if (bAni){
		this.fnCreateAniObject(objForm);
		if (bShow){
			objForm.aniShow.play();
		}
		else{
			objForm.aniHide.play();
		}
	}
	else{
		if (bShow){
			objForm.divNotice.set_height(150);
		}
		else{
			objForm.divNotice.set_height(0);
		}
	}
}

this.fnCreateAniObject = function(objForm)
{
	//animation 미존재시 추가
	if (!objForm.aniShow){
		var objAniShow = new nexacro.Animation("aniShow", objForm);
		objForm.addChild("aniShow", objAniShow);
		objForm.aniShow.addTarget("AniItem01", objForm.divNotice, "height:120");
		objForm.aniShow.setEventHandler("oncomplete"
									, 	function(obj,e)
										{  
											//trace("끝1");
										}
									, objForm);
		
		objForm.aniShow.set_duration(500);

		var aniObj01 = new nexacro.Animation("aniHide", objForm);
		objForm.addChild("aniHide", aniObj01);
		objForm.aniHide.addTarget("AniItem01", objForm.divNotice, "height:0");
		objForm.aniHide.setEventHandler("oncomplete"
									, 	function(obj,e)
										{  
											//trace("끝2");
										}
									, objForm);
		objForm.aniHide.set_duration(500);	
	}
};

]]></Script>
    <Bind>
      <BindItem id="item0" compid="mskStartTime" propid="value" datasetid="dsHistory" columnid="date"/>
    </Bind>
    <Objects>
      <Dataset id="dsWorkTime">
        <ColumnInfo>
          <Column id="USER_ID" type="STRING" size="256"/>
          <Column id="endTime" type="STRING" size="256"/>
          <Column id="workTime" type="STRING" size="256"/>
          <Column id="startTime" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
  </Form>
</FDL>
